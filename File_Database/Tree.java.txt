public class Tree <T>{

    private class Node<T>{
        private int data;
        Node<T> left;
        Node<T> right;
        public Node(){
            data = 0;
            left = null;
            right = null;
        }
    }

    private int height;
    private Node<Integer> root;

    public Tree(){
        root = null;
        height = 0;
    }

    public void insert(int data){
        Node<Integer> newNode = new Node<>();
        newNode.data = data;
        Node<Integer> y = null;
        Node<Integer> x = root;
        if(root == null){
            root = newNode;
            root.data = data;
        }else{
            while(x != null){
                y = x;
                if(newNode.data > x.data || newNode.data == x.data){
                    x = x.right;
                }else{
                    x = x.left;
                }
            }
            x = newNode;
            if(y!= null){
                if(x.data > y.data){
                    y.right = x;
                }else{
                    y.left = x;
                }
            }
        }
    }

    public Node<Integer> TreeMinimum(Node<Integer> x){
        while(x.left != null){
            x = x.left;
        }
        return x;
    }

    public Node<Integer> TreeMaximun(Node<Integer> x ){
        while(x.right != null){
            x = x.right;
        }
        return x;
    }

    public boolean contains(Node<Integer> node ,int data){
        if(node == null) {
            return false;
        }else if (node.data == data){
            return true;
        }
        if(data < node.data){
            return contains(node.left , data);
        }else{
            return contains(node.right ,data);
        }

    }

    public Node<Integer> parent(Node<Integer> node){
        Node<Integer> y = null;
        Node<Integer> x = root;
        while(x != node){
            y = x;
            if(node.data > x.data || node.data == x.data){
                x = x.right;
            }else{
                x = x.left;
            }
        }
        return y;
    }

    public Node<Integer> getNode(int data){
        Node<Integer> x = root;
        while(x.data != data){
            if(data > x.data){
                x = x.right;
            }else{
                x = x.left;
            }
        }
        return x;
    }

    public void preOrder(Node<Integer> x ){
        if(x != null){
            System.out.print(x.data + " ");
            preOrder(x.left);
            preOrder(x.right);
        }
    }

    public void inOrder(Node<Integer> x ){
        if(x != null){
            inOrder(x.left);
            System.out.print(x.data + " ");
            inOrder(x.right);
        }
    }

    public void postOrder(Node<Integer> x ){
        if(x != null){
            postOrder(x.left);
            postOrder(x.right);
            System.out.print(x.data + " ");
        }
    }

    public Node<Integer> successor(Node<Integer> x ){
        if(x.right != null){
            return TreeMinimum(x.right);
        }else{
            Node<Integer> y = parent(x);
            if(y.left == x){
                return y;
            }else{
                //If x is a right child, then you need to go up the tree
                // until you find a node that is a left child of its parent.
                // The parent of that node is the successor.
                y = parent(y);
                while(y.left == null){
                    y = parent(y);
                }
                return y.left;
            }
        }
    }
    public void delete(Node<Integer> x){

        if(x == root){
            while(root != null){
                root = root.left;
            }
        }

        if(x.right == null && x.left == null){
           if(parent(x).left == x){
               parent(x).left = null;
           }else{
               parent(x).right = null;
           }
        }else if (x.right != null && x.left == null){ //if it has one child, connect child of x with parent of x
            if(parent(x).left == x){
                parent(x).left = x.right;
            }else{
                parent(x).right = x.right;
            }
        }else if (x.right == null && x.left !=null){
            if(parent(x).left == x){
                parent(x).left = x.left;
            }else{
                parent(x).right = x.left;
            }
        }else{
            Node<Integer> y = successor(x);
            Node<Integer> z = parent(y);
            if(z == x){
                if(parent(x).left == x){
                    parent(x).left = y;
                }else{
                    parent(x).right = y;
                }
                y.left = x.left;
            }
        }
        //if it has two children, find the successor of x, swap the nodes and then remove it
        // Do this until you reach either case 1 or 2.
    }

    public int getHeight(){
        if(root.right == null || root.left == null){
            return 0;
        }else{
            return height;
        }
    }

    public Node<Integer> getRoot(){
        return root;
    }

    public int getData(Node<Integer> x ){
        return x.data;
    }

}
