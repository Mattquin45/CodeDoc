import java.util.NoSuchElementException;

public class Stack <T>{

    //Linked list implementation is better because the push method in this code is O(n) time
    // while in Linked list it is in O(1) time, therefore linked list is canon :)

    private int top;
    private T[] stack;

    public Stack(){
        this(5);
    }

    public Stack(int capacity){
        top = 0;
        stack = (T[]) new Object[capacity];
    }

    public void push(T data){
        if(top == stack.length){
            T[] temp = (T[]) new Object[stack.length * 2];
            for(int i = 0; i < stack.length;i++){
                temp[i] = stack[i];
            }
            stack = temp;
        }
        stack[top++] = data; //performs action first and then adds 1 to top
       // top++;
    }

    public T pop(){
        if(isEmpty()){
            throw new StackOverflowError();
        }
        return stack[--top];
    }

    public T peek(){
        if(isEmpty()){
            throw new NoSuchElementException();
        }
        return stack[top - 1];
    }

    public boolean contains(T data){
        for(int i = 0; i < top;i++){
            if(stack[i].equals(data)){
                return true;
            }
        }
        return false;
    }

    public boolean isEmpty(){
        return top == 0;
    }

    public int size(){
        return top;
    }


    public String toString(){
        if(isEmpty()){
            return "[]";
        }else{
            String str = "[";
            for(int i = 0; i < top - 1;i++){
                str = str + stack[i] + ", ";
            }
            str +=  stack[top- 1]  + "]";
            return str;
        }
    }

}
